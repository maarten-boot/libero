/*---------------------------------------------------------------------------*
 *  calculd.d - LIBERO dialog data definitions for calcul.c.                 *
 *  Generated by LIBERO 2.10 on  7 Dec, 1995, 14:56.                         *
 *  Schema file used: lrschema.c.                                            *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define terminate_event                 -1
#define end_mark_event                  0
#define error_event                     1
#define exception_event                 2
#define function_event                  3
#define left_par_event                  4
#define number_event                    5
#define ok_event                        6
#define operator_event                  7
#define other_event                     8
#define right_par_event                 9
#define string_event                    10
#define _LR_STATE_after_init            0
#define _LR_STATE_expecting_operand     1
#define _LR_STATE_expecting_operator    2
#define _LR_STATE_defaults              3
#define _LR_defaults_state              3

/*- Variables used by dialog interpreter ------------------------------------*/

typedef int t_event;                    /*  Type for dialog entity           */
static t_event
    _LR_event,                          /*  Event for state transition       */
    _LR_state,                          /*  Current dialog state             */
    _LR_savest,                         /*  Saved dialog state               */
    _LR_index,                          /*  Index into vector table          */
    the_next_event,                     /*  Next event from module           */
    the_exception_event;                /*  Exception event from module      */

static word
   *_LR_vecptr;                         /*  Pointer into vector table        */

static Bool
    exception_raised;                   /*  TRUE if exception raised         */

/*- Function prototypes -----------------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

local  raise_exception                  (t_event event);
MODULE initialise_the_program           (void);
MODULE get_external_event               (void);
MODULE get_next_token                   (void);
MODULE signal_invalid_token             (void);
MODULE signal_token_missing             (void);
MODULE stack_the_number                 (void);
MODULE stack_the_operator               (void);
MODULE stack_the_string                 (void);
MODULE terminate_the_program            (void);
MODULE unstack_all_operators            (void);
MODULE unstack_ge_operators             (void);
MODULE unstack_if_end_mark              (void);
MODULE unstack_if_left_par              (void);

/*- Static areas ------------------------------------------------------------*/

static word _LR_nextst [][11] =
{
    { 0,0,0,0,0,0,1,0,0,0,0 },
    { 0,0,0,1,1,2,0,0,0,0,2 },
    { 2,0,0,0,0,0,0,1,0,2,0 },
    { 3,0,3,3,3,3,0,3,3,3,3 }
};

static word _LR_action [][11] =
{
    { 0,2,0,0,0,0,1,0,0,0,0 },
    { 0,0,0,5,5,4,0,0,0,0,3 },
    { 7,0,0,0,0,0,0,6,0,8,0 },
    { 10,0,2,9,9,9,0,9,9,9,9 }
};

static word _LR_vector [][3+1] =
{
    {0},
    {0,_LR_STOP},
    {6,_LR_STOP},
    {5,0,_LR_STOP},
    {3,0,_LR_STOP},
    {4,0,_LR_STOP},
    {8,4,0,_LR_STOP},
    {7,9,6,_LR_STOP},
    {7,10,0,_LR_STOP},
    {1,6,_LR_STOP},
    {2,6,_LR_STOP}
};

static function _LR_module [] =
{
    get_next_token,
    signal_invalid_token,
    signal_token_missing,
    stack_the_number,
    stack_the_operator,
    stack_the_string,
    terminate_the_program,
    unstack_all_operators,
    unstack_ge_operators,
    unstack_if_end_mark,
    unstack_if_left_par
};

