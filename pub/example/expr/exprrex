/*---------------------------------------------------------------------------
 *
 *  exprrex     Example dialog for REXX schema
 *
 *  Written:    96/05/11  Pieter Hintjens
 *  Revised:    96/05/24
 *
 *  exprrex - generated script; do not modify directly. See exprrex.l
 *  Generated by LIBERO 2.11 on 29 May, 1996, 20:01.
 *  Schema used: lrschema.rex
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

end_mark_priority  = 1                  /*  Relative priority of tokens      */
left_par_priority  = 2                  /*   which may occur in exression    */
right_par_priority = 3                  /*   - higher number means higher    */
term_op_priority   = 4                  /*   priority, ie. executed first.   */
factor_op_priority = 5
lowest_op_priority = 4
end_mark_token     = "$"                /*  Indicates end of operator stack  */
operator_max       = 30                 /*  Max size of operator stack       */
operand_max        = 30                 /*  Max size of operand stack        */
terminate_event     = -1                /*  Halts the dialog                 */
LR_NULL_EVENT       = -2
end_mark_event      = 0
error_event         = 1
exception_event     = 2
factor_op_event     = 3
left_par_event      = 4
number_event        = 5
ok_event            = 6
other_event         = 7
right_par_event     = 8
term_op_event       = 9
LR_STATE_after_init = 0
LR_STATE_expecting_operand = 1
LR_STATE_expecting_operator = 2
LR_STATE_defaults   = 3
LR_defaults_state   = 3

/*- Public dialog variables -------------------------------------------------*/

the_next_event = 0                      /*  Next event from module           */
the_exception_event = 0                 /*  Exception event from module      */
feedback = 0                            /*  Return code from this function   */
exception_raised = 0                    /*  1 if exception raised            */

/*- Variables used by dialog interpreter ------------------------------------*/

LR_event = 0                            /*  Event for state transition       */
LR_state = 0                            /*  Current dialog state             */
LR_savest = 0                           /*  Saved dialog state               */
LR_index = 0                            /*  Index into vector table          */
LR_vecptr = 0                           /*  Index into module vector         */

/*- Static areas ------------------------------------------------------------*/

LR_nextst = ""
LR_nextst = LR_nextst || "0000001000"
LR_nextst = LR_nextst || "0000120001"
LR_nextst = LR_nextst || "2001000021"
LR_nextst = LR_nextst || "3033330333"

LR_action = ""
LR_action = LR_action || "00020000000001000000"
LR_action = LR_action || "00000000050400000003"
LR_action = LR_action || "07000006000000000806"
LR_action = LR_action || "10000209090900090909"

LR_module = ""
LR_module = LR_module || "02" || "00"
LR_module = LR_module || "07" || "00"
LR_module = LR_module || "010307" || "00"
LR_module = LR_module || "0502" || "00"
LR_module = LR_module || "0602" || "00"
LR_module = LR_module || "090602" || "00"
LR_module = LR_module || "081007" || "00"
LR_module = LR_module || "081102" || "00"
LR_module = LR_module || "0307" || "00"
LR_module = LR_module || "0407" || "00"

LR_offset.01 = 00
LR_offset.02 = 02
LR_offset.03 = 04
LR_offset.04 = 08
LR_offset.05 = 11
LR_offset.06 = 14
LR_offset.07 = 18
LR_offset.08 = 22
LR_offset.09 = 26
LR_offset.10 = 29

/**********************************   MAIN   **********************************/

LR_state = 0                            /*  First state is always zero       */
Parse Arg arguments
Call initialise_the_program arguments
Do While the_next_event <> terminate_event
    LR_event = the_next_event
    If LR_event < 0 | LR_event >= 10 Then Do
        Say "State" LR_state "- event" LR_event "is out of range"
        Exit 1
    End
    LR_index = (LR_state * 10 + LR_event) * 2 + 1
    LR_index = Substr(LR_action, LR_index, 2)
    LR_savest = LR_state

    /*  if no action for this event, try the defaults state                  */
    If LR_index = 0 Then Do
        LR_state = LR_defaults_state
        LR_index = (LR_state * 10 + LR_event) * 2 + 1
        LR_index = Substr(LR_action, LR_index, 2)
        If LR_index = 0 Then Do
            Say "State" LR_state "- event" LR_event "is not accepted"
            Exit 1
        End
    End
    the_next_event = LR_NULL_EVENT
    the_exception_event = LR_NULL_EVENT
    exception_raised = 0

    /*  Execute module list for state transition, 0 indicates end of list    */
    LR_vecptr = LR_offset.LR_index
    LR_modnbr = Substr(LR_module, LR_vecptr * 2 + 1, 2)
    Do While LR_modnbr > 0 & exception_raised = 0
        Select
            When LR_modnbr = 1 Then Call allow_signed_number
            When LR_modnbr = 2 Then Call get_next_token
            When LR_modnbr = 3 Then Call signal_invalid_token
            When LR_modnbr = 4 Then Call signal_token_missing
            When LR_modnbr = 5 Then Call stack_the_number
            When LR_modnbr = 6 Then Call stack_the_operator
            When LR_modnbr = 7 Then Call terminate_the_program
            When LR_modnbr = 8 Then Call unstack_all_operators
            When LR_modnbr = 9 Then Call unstack_ge_operators
            When LR_modnbr = 10 Then Call unstack_if_end_mark
            When LR_modnbr = 11 Then Call unstack_if_left_par
        End
        LR_vecptr = LR_vecptr + 1
        LR_modnbr = Substr(LR_module, LR_vecptr * 2 + 1, 2)
    End
    /*  Handle exception if any was raised                                   */
    If exception_raised Then Do
        If the_exception_event <> LR_NULL_EVENT Then Do
            LR_event = the_exception_event
        End
        the_next_event = LR_event
    End
    Else Do
        LR_index = (LR_state * 10 + LR_event) * 1 + 1
        LR_state = Substr(LR_nextst, LR_index, 1)
    End
    If LR_state = LR_defaults_state Then Do
        LR_state = LR_savest
    End
    If the_next_event = LR_NULL_EVENT Then Do
        Call get_external_event
        If the_next_event = LR_NULL_EVENT Then Do
            Say "No event set after event" LR_event "in state" LR_state
            Exit 1
        End
    End
End
Exit feedback

raise_exception:
    Arg event
    exception_raised = 1
    If event > 0 Then the_exception_event = event
    Return


/*************************   INITIALISE THE PROGRAM   ************************/

initialise_the_program:
    Parse Arg expr                      /*  Get expression argument          */

    result        = 0                   /*  Assume result is zero            */
    operand_ptr   = 0                   /*  Operand stack holds zero         */
    operator_ptr  = 0                   /*  Operator stack holds end mark    */
    op_number.0   = 0
    op_token.0    = end_mark_token
    op_priority.0 = end_mark_priority
    expr_ptr      = 1                   /*  Move to start of expression      */
    expr = expr || end_mark_token       /*  Append end-of-expression mark    */

    the_next_event = ok_event
    Return


/*****************************   GET NEXT TOKEN   ****************************/

get_next_token:
    Do Until the_token <> " "           /*  Skip spaces                      */
        the_token = Substr(expr, expr_ptr, 1)
        expr_ptr = expr_ptr + 1
    End

    Select
        When the_token = "+" | the_token = "-" Then Do
            the_next_event = term_op_event
            the_priority = term_op_priority
        End
        When the_token = "*" | the_token = "/" Then Do
            the_next_event = factor_op_event
            the_priority = factor_op_priority
        End
        When the_token = "(" Then Do
            the_next_event = left_par_event
            the_priority = left_par_priority
        End
        When the_token = ")" Then Do
            the_next_event = right_par_event
            the_priority = right_par_priority
        End
        When the_token = end_mark_token Then Do
            the_next_event = end_mark_event
            the_priority = end_mark_priority
        End
        Otherwise Do
            If the_token >= "0" & the_token <= "9" Then Do
                the_next_event = number_event
                Call collect_number
            End
            Else Do
                Say "Invalid token:" the_token
                Call raise_exception (exception_event)
            End
        End
    End
    Return

/*  Pick-up the_number at expr_ptr; first digit is already in the_token      */

collect_number :
    the_digit = Substr(expr, expr_ptr, 1)
    Do While the_digit >= "0" & the_digit <= "9"
        the_token = the_token || the_digit
        expr_ptr  = expr_ptr + 1
        the_digit = Substr(expr, expr_ptr, 1)
    End
    the_number = Value(the_token)
    Return


/****************************   STACK THE NUMBER   ***************************/

stack_the_number:
    If operand_ptr < operand_max Then Do
        operand_ptr = operand_ptr + 1
        op_number.operand_ptr = the_number
    End
    Else Do
        Say "Operand stack overflowed"
        Call raise_exception (exception_event)
    End
    Return


/***************************   STACK THE OPERATOR   **************************/

stack_the_operator:
    If operator_ptr < operator_max Then Do
        operator_ptr = operator_ptr + 1
        op_token.operator_ptr    = the_token
        op_priority.operator_ptr = the_priority
    End
    Else Do
        Say "Operator stack overflowed"
        Call raise_exception (exception_event)
    End
    Return


/**************************   ALLOW SIGNED NUMBER   **************************/

allow_signed_number:
    cur_sign  = the_token
    the_token = Substr(expr, expr_ptr, 1)
    If the_token >= "0" & the_token <= "9" Then Do
        expr_ptr = expr_ptr + 1
        Call collect_number
        If cur_sign = "-" Then the_number = 0 - the_number
        /*  Go handle number as operand in this state                        */
        Call raise_exception (number_event)
    End
    Return


/**************************   UNSTACK IF LEFT PAR   **************************/

unstack_if_left_par:
    If op_token.operator_ptr = "(" Then Do
        operator_ptr = operator_ptr - 1
    End
    Else Do
        Call raise_exception (exception_event)
        Say "Too many right parentheses in expression"
    End
    Return


/*************************   UNSTACK ALL OPERATORS   *************************/

unstack_all_operators:
    Do While op_priority.operator_ptr >= lowest_op_priority
        Call unstack_operator
    End
    Return

unstack_operator :
    the_operator = op_token.operator_ptr
    operator_ptr = operator_ptr - 1
    op_1 = op_number.operand_ptr
    If Pos(the_operator, "+-/*") <> 0 Then Do
        operand_ptr = operand_ptr - 1
        op_2 = op_1
        op_1 = op_number.operand_ptr
    End
    Select
        When the_operator = "+" Then
            op_1 = op_1 + op_2
        When the_operator = "-" Then
            op_1 = op_1 - op_2
        When the_operator = "*" Then
            op_1 = op_1 * op_2
        When the_operator = "/" Then
            op_1 = op_1 / op_2
        When the_operator = end_mark_token Then
            Say op_1                    /*  Echo result value                */
        Otherwise Do
            Say "Internal Error"
            Call raise_exception (exception_event)
        End
    End
    op_number.operand_ptr = op_1
    Return


/**************************   UNSTACK GE OPERATORS   *************************/

unstack_ge_operators:
    Do While op_priority.operator_ptr >= the_priority
        Call unstack_operator
    End
    Return


/**************************   UNSTACK IF END MARK   **************************/

unstack_if_end_mark:
    If op_token.operator_ptr = end_mark_token Then Do
        Call unstack_operator
    End
    Else Do
        Say "Right parenthesis is missing"
        Call raise_exception (exception_event)
    End
    Return


/**************************   SIGNAL INVALID TOKEN   *************************/

signal_invalid_token:
    Say "Token is invalid at this point:" the_token
    Return


/**************************   SIGNAL TOKEN MISSING   *************************/

signal_token_missing:
    Say "Unexpected end of expression"
    Return


/***************************   GET EXTERNAL EVENT   **************************/

get_external_event:
    Return


/*************************   TERMINATE THE PROGRAM    ************************/

terminate_the_program:
    the_next_event = terminate_event
    Return
