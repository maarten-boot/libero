<HTML><HEAD><!--Revised: 15 Apr 1996, 18:33 12 Apr 1996 By: Pieter Hintjens-->
<TITLE>Libero Technical Reference</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A HREF="index.htm"> Libero home page</A>
 | <A href="index2.htm#doc_index">Libero documentation</A><BR>
 | <A href="lrtech.htm">&lt;&lt;</A> | &lt;
 | <A href="lrtech1.htm">&gt;</A> | <A href="lrtech13.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="lr_tiny.gif" ALT="Libero" WIDTH=55 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=4><B>Libero</B><BR><FONT SIZE=2>Version 2.32
</TABLE>
<HR>
<H1>Libero Technical Reference</H1>

<P>
<MENU>
<LI><A HREF="#TOC1">A First Look At Code Generation</A></LI>
<MENU>
<LI><A HREF="#TOC2">The Schema</A></LI>
</MENU>
<LI><A HREF="lrtech1.htm#TOC3">Read-Only Variables</A></LI>
<LI><A HREF="lrtech2.htm#TOC4">Schema Commands</A></LI>
<MENU>
<LI><A HREF="lrtech2.htm#TOC5">Notes</A></LI>
</MENU>
<LI><A HREF="lrtech3.htm#TOC6">Syntax Of Expressions</A></LI>
<LI><A HREF="lrtech4.htm#TOC7">Syntax Of Logical Conditions</A></LI>
<MENU>
<LI><A HREF="lrtech4.htm#TOC8">Logical Operators</A></LI>
<LI><A HREF="lrtech4.htm#TOC9">Standard Tests</A></LI>
</MENU>
<LI><A HREF="lrtech5.htm#TOC10">Control Variables</A></LI>
<LI><A HREF="lrtech6.htm#TOC11">Standard :do Conditions</A></LI>
<LI><A HREF="lrtech7.htm#TOC12">Extra Variables In A :do Loop</A></LI>
<MENU>
<LI><A HREF="lrtech7.htm#TOC13"><TT>:do while</TT> <I>condition</I></A></LI>
<LI><A HREF="lrtech7.htm#TOC14"><TT>:do event</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC15"><TT>:do event local</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC16"><TT>:do state</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC17"><TT>:do module</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC18"><TT>:do action</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC19"><TT>:do nextst</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC20"><TT>:do vector</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC21"><TT>:do overflow</TT></A></LI>
<LI><A HREF="lrtech7.htm#TOC22"><TT>:do stubs</TT> [<I>filename</I>]...</A></LI>
</MENU>
<LI><A HREF="lrtech8.htm#TOC23">General Rules for Code Generation</A></LI>
<LI><A HREF="lrtech9.htm#TOC24">Generating Module Stubs</A></LI>
<LI><A HREF="lrtech10.htm#TOC25">Generating COBOL Code</A></LI>
<LI><A HREF="lrtech11.htm#TOC26">The State Machine Algorithm</A></LI>
<LI><A HREF="lrtech12.htm#TOC27">Compiled-In Limitations</A></LI>
<LI><A HREF="lrtech13.htm#TOC28">Quick Reference - Libero Schema Language</A></LI>
<MENU>
<LI><A HREF="lrtech13.htm#TOC29">General</A></LI>
<LI><A HREF="lrtech13.htm#TOC30">Read-Only Variables</A></LI>
<LI><A HREF="lrtech13.htm#TOC31">Schema Commands</A></LI>
<LI><A HREF="lrtech13.htm#TOC32">Expressions</A></LI>
<LI><A HREF="lrtech13.htm#TOC33">Logical Conditions</A></LI>
<LI><A HREF="lrtech13.htm#TOC34">Control Variables</A></LI>
<LI><A HREF="lrtech13.htm#TOC35">Standard :do Conditions</A></LI>
</MENU>
</MENU>
</P>
<HR>

<H2><A NAME="TOC1">A First Look At Code Generation</A></H2>

<H3><A NAME="TOC2">The Schema</A></H3>

<UL>
<LI>The schema is like a program or script.  It tells the code generator what
to do, when, and how.  Libero executes the schema from start to end.

<LI>The code generator has a few ideas about what it has to generate, but the
schema usually has to tell it more.  For example, the schema can say 'please
generate numbers with 3 digits like this: 001'.

<LI>The schema decides what files to generate, under what conditions.  It
decides what they are called, and what they contain.
</UL>

<P>This is the basic logic of Libero's code generator:
<UL>
<LI>Read the schema line by line; ignore comment lines.

<LI>If the line contains a schema command, execute the command.

<LI>If the line does not contain a command, write it to the current output
file, if any.  If no output file is open, discard it.
</UL>

<P>This is a 'hello world' schema:

<PRE>
:echo "Hello, World."
</PRE>

<P>This is more realistic schema fragment:

<PRE>
!  Example Libero of schema
!
:if not exist $source.c
:echo "lr I: creating skeleton program $source.c..."
:output $source.c
/*===============================================================
 *  $source.c   description...
 *  Written:    $date       $author
 *  Revised:    $date
 *  Skeleton generated by LIBERO $version on $fulldate, $time.
 *===============================================================*/

#include "$dialog.d"                    /*  Include dialog data  */

/********************   INITIALISE THE PROGRAM  ******************/

MODULE $"initialise_the_program" (void)
{
    $"the_next_event" = $"ok_event";
}
:close
:endif
</PRE>

<P>How does this schema work?
<UL>
<LI>Any lines that starts with '!' is as a comment.  The code generator
discards all such lines.

<LI>Libero looks for names starting with '$', and replaces these by the value
of that variable.  Libero supplies a set of standard variables like '$date'
and '$source'.  You can also define your own variables.

<LI>When a line starts with ':xxxx', this is read by Libero as a schema
command.  Typical commands are ':if', ':echo'. ':open'. Command lines can
include variables.

<LI>Any other line is copied to the currently-open output.
</UL>

<P>When Libero replaces variables, it keeps the text as aligned as possible
by treating white-space (blanks or tabs) as elastic.  For instance, here is
some 'C' code before and after replacement. Notice how the right-hand margin
does not move:

<PRE>
/*  Source generated on $date - Libero $version                */
/*  Source generated on 93/07/12 - Libero 2.10                 */
</PRE>

<P>A variable name ends with the first non-name character (A-Z, a-z, 0-9, _).
To mark the end of a variable name that is 'pasted' to some text, use a '\'.
For instance, this is a line before and after inserting the $source
variable:

<PRE>
    :output $source\d.d
==&gt; :output myprogd.d
</PRE>

<P>If you capitalise (at least) the first letter of a variable name, Libero
inserts the whole value in uppercase.  For example:

<PRE>
    :output $Source\d.d
==&gt; :output MYPROGd.d
</PRE>

<P>To output a name that matches the current -style setting, do this
(e.g. -style=caps):

<PRE>
    $"the_next_event" = $"ok_event";
==&gt; TheNextEvent = OkEvent;
</PRE>

<P>To output a '$', use two '$'s together:

<PRE>
    $"the_next_event" = $$$"ok_event";
==&gt; TheNextEvent = $OkEvent;
</PRE>

<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="lrtech.htm">&lt;&lt;</A> | &lt;
 | <A href="lrtech1.htm">&gt;</A> | <A href="lrtech13.htm">&gt;&gt;</A>
<BR><FONT SIZE=2>
| <EM>Libero Technical Reference</EM>
| <A href="lrtech1.htm">Read-Only Variables</A>
| <A href="lrtech2.htm">Schema Commands</A>
| <A href="lrtech3.htm">Syntax Of Expressions</A>
| <A href="lrtech4.htm">Syntax Of Logical Conditions</A>
| <A href="lrtech5.htm">Control Variables</A>
| <A href="lrtech6.htm">Standard :do Conditions</A>
| <A href="lrtech7.htm">Extra Variables In A :do Loop</A>
| <A href="lrtech8.htm">General Rules for Code Generation</A>
| <A href="lrtech9.htm">Generating Module Stubs</A>
| <A href="lrtech10.htm">Generating COBOL Code</A>
| <A href="lrtech11.htm">The State Machine Algorithm</A>
| <A href="lrtech12.htm">Compiled-In Limitations</A>
| <A href="lrtech13.htm">Quick Reference - Libero Schema Language</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0>
</A>
<BR><FONT SIZE=2>Copyright &#169; 1996-97 iMatix</TABLE>
</BODY></HTML>
