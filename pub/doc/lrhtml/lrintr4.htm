<HTML><HEAD><!--Revised: 28 Dec 1996 By: Pieter Hintjens-->
<TITLE>Source Code For Phone.c</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A HREF="index.htm"> Libero home page</A>
 | <A href="index2.htm#doc_index">Libero documentation</A><BR>
 | <A href="lrintr.htm">&lt;&lt;</A> | <A href="lrintr3.htm">&lt;</A>
 | <A href="lrintr5.htm">&gt;</A> | <A href="lrintr8.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="lr_tiny.gif" ALT="Libero" WIDTH=55 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=4><B>Libero</B><BR><FONT SIZE=2>Version 2.32
</TABLE>
<HR>

<H2><A NAME="TOC10">Source Code For Phone.c</A></H2>

<P>When I take the above dialog (called phone.l), and give it to
Libero, this is what happens:</P>

<PRE>
 C:\CTOOLS\LIBERO&gt;<B>lr phone</B>
 LIBERO v2.11 (c) 1991-96 by Pieter A. Hintjens
 lr I: processing 'phone.l'...
 lr I: creating skeleton program phone.c...
 lr I: building phone.d...
 lr I: building phone.i...
 lr I: Building stub for have dialed digit
 lr I: Building stub for reset dialed number
 lr I: Building stub for send outgoing release
 lr I: Building stub for send outgoing request
 lr I: Building stub for start busy tone
 lr I: Building stub for start dial tone
 lr I: Building stub for start released tone
 lr I: Building stub for start ringing local
 lr I: Building stub for start ringing remote
 lr I: Building stub for stop local tones
 lr I: Building stub for stop ringing local
 lr I: Building stub for stop ringing remote
 lr I: Building stub for wait for incoming message
 C:\CTOOLS\LIBERO&gt;
</PRE>

<P>Libero assumes that I want to make a program called phone.c.  Since this
file does not exist, it creates a skeleton program for me.  This only happens
the first time.  Once the program is created, Libero will add missing pieces
to it, at the end, but will never change it again otherwise.</P>

<P>I get two other files as well, phone.d and phone.i.  These are the data
and interpreter for my dialog.  I need these files to compile phone.c.  Each
time I run Libero, it recreates these two files.  If I was working in another
language, I would get different files, with different extensions.  The
default language is C.  Here is the skeleton program that Libero gave me,
more or less:</P>

<PRE>
/*=========================================================================*
 *                                                                         *
 *  phone.c     description...                                             *
 *                                                                         *
 *  Written:    95/07/29    Your Name                                      *
 *  Revised:    95/07/29                                                   *
 *                                                                         *
 *  Skeleton generated by LIBERO 2.10 on 29 Jul, 1995, 11:50.              *
 *                                                                         *
 *=========================================================================*/

#include "prelude.h"                    /*  Public definitions             */
#include "phone.d"                      /*  Include dialog data            */

/*- Function prototypes ---------------------------------------------------*/

/*- Global variables used in this source file only ------------------------*/

static int
    feedback;                           /*  Feedback for calling program   */

static char
    *some_param;                        /*  Example of parameter           */

/********************************   M A I N   ******************************/

int my_funct (char *p_some_param)
{
    feedback = 0;                       /*  No errors so far               */
    some_param = p_some_param;          /*  Local copy of parameters       */

#   include "phone.i"                   /*  Include dialog interpreter     */
}

/************************   INITIALISE THE PROGRAM   ***********************/

MODULE initialise_the_program (void)
{
    the_next_event = ok_event;
}

/**************************   GET EXTERNAL EVENT   *************************/

MODULE get_external_event (void)
{
}

/************************   TERMINATE THE PROGRAM   ***********************/

MODULE terminate_the_program (void)
{
    the_next_event = terminate_event;
}

/**************************   HAVE DIALED DIGIT   **************************/

MODULE have_dialed_digit (void)
{
}

/************************   RESET DIALED NUMBER   ************************/

MODULE reset_dialed_number (void)
{
}
 ... etc.
</PRE>

<P>I discuss the details of Libero+C programming elsewhere.  Some rules
apply whatever language you use:
<UL>
<LI>Libero creates a program that is ready to compile and run. The dialog
will halt with an error message since we don't supply any events beyond the
initial Ok.</LI>
<LI>There are some standard modules: a main entry point of some kind,
Initialise-The-Program, Get-external-event, and Terminate-The-Program.</LI>
<LI>Libero adds a module stub for each action that you use in your
dialog.</LI>
<LI>The program relies heavily on source-local variables.  I.e. variables
that are global to all functions in the source file, but not visible to other
source files.  This can be disturbing to some people, but is a natural
consequence of the way Libero restructures your program.  It actually works
quite well, as we'll see later.</LI>
</UL></P>

<P>The basic C program consists of a number of standard pieces:
<UL>
<LI><TT>Main</TT> - passes control to the Libero generated code.  In some
languages, such as the C program above, it must also copy any arguments into
variables that can be accessed by other modules.</LI>
<LI><TT>Initialise-The-Program</TT> - initial sanity checks, then usually
passes an Ok event to the dialog.  We do this with the line:<BR>
<PRE>the_next_event = ok_event;</PRE></LI>

<LI><TT>Terminate-The-Program</TT> - halts the dialog by passing it a
Terminate event.  Generally this is the last action that the dialog executes,
so it is also a convenient place to shut log files, etc.</LI>
<LI><TT>Get-External-Event</TT> - the dialog calls this implicitly if it
didn't get an event from any of the modules it executed.</LI>
</UL></P>

<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="lrintr.htm">&lt;&lt;</A> | <A href="lrintr3.htm">&lt;</A>
 | <A href="lrintr5.htm">&gt;</A> | <A href="lrintr8.htm">&gt;&gt;</A>
<BR><FONT SIZE=2>
| <A href="lrintr.htm">Introduction to Libero</A>
| <A href="lrintr1.htm">The Coke Machine Example</A>
| <A href="lrintr2.htm">Example of Using a Telephone</A>
| <A href="lrintr3.htm">Example of Controlling a Telephone</A>
| <EM>Source Code For Phone.c</EM>
| <A href="lrintr5.htm">Example of a C/C++ Comment Stripper</A>
| <A href="lrintr6.htm">Example of Parsing An Arithmetic Expression</A>
| <A href="lrintr7.htm">Dialogs For Dummies</A>
| <A href="lrintr8.htm">Frequently Asked Questions</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0>
</A>
<BR><FONT SIZE=2>Copyright &#169; 1996-97 iMatix</TABLE>
</BODY></HTML>
